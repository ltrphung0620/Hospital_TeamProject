name: CI/CD Docker Workflow for DigitalOcean

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build_and_push_docker_image:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permission to push to GitHub Packages

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image name
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use the built-in token for pushing

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Hospital_API/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.IMAGE_NAME }}:latest

  deploy-to-production:
    needs: build_and_push_docker_image
    runs-on: ubuntu-latest

    environment:
      name: production
      # url: 'http://${{ secrets.DO_HOST }}'

    steps:
      - name: Set image name
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Deploy to DigitalOcean Droplet via Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          password: ${{ secrets.DO_PASSWORD }}
          script: |
            # --- This script runs on your DigitalOcean server ---
            # Login to GitHub Container Registry to pull the private image
            echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Variables
            IMAGE_PULL_TAG="ghcr.io/${{ env.IMAGE_NAME }}:latest"
            CONTAINER_NAME="hospital-api-container"

            # Stop and remove the old container
            echo "Stopping and removing old container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            # Pull the latest image from the registry
            echo "Pulling latest Docker image..."
            docker pull $IMAGE_PULL_TAG

            # Run a new container from the new image
            echo "Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart always \
              -p 8080:8080 \
              -e ASPNETCORE_URLS=http://+:8080 \
              -e "ConnectionStrings__DefaultConnection=${{ secrets.ASPNETCORE_CONNECTIONSTRING }}" \
              $IMAGE_PULL_TAG

            # --- Debugging Step ---
            echo "Waiting 15 seconds for container to initialize..."
            sleep 15
            echo "Fetching container logs for debugging:"
            docker logs $CONTAINER_NAME

            # Clean up old, unused Docker images
            echo "Cleaning up old images..."
            docker image prune -af

            echo "Deployment completed successfully!"
